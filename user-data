#cloud-config
autoinstall:
  version: 1
#  interactive-sections:  # Install groups listed here will wait for user input
#   - network
  identity: 
    hostname: ansible
    password: "$6$FhcddHFVZ7ABA4Gi$YjFIFedtRKITiysIsxwozSb/uLH1Vmygw.lTOv4XJ9vlfvXv56zzHC9AestbzrpFIZMk34CClrw7NNDNK6Nx/0"
    username: ansible
  ssh:
    allow-pw: false
    install-server: true
    authorized-keys:
      - "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDWBGnAXqymm/7z77LDEKaYVwwYCC7VZf15WSJg8sc1/bQGIr29OXuCLi3Qn+Ie8WLJn9wN0247uFhbFfIJtibSU2WCNDCEpyUabjSHuHm4Oz2/A+062FZolT77zelCVtEtzbEc4cooDLMTPhICgQI7Sz7ZB/f3LHUJ3IG2Pp4+8wOv2/V/jKfMOb/20HQxjFTs8nE7GtCcKhokDVpcPa1PSA7fNKSR5R1UvveJ9gFjAshFm0y1ejtXXXyjLL6ZWECtEx8HPnt1vqj0qRKRu04Oj2mTpsiJCPXKE9eQoiIopfidw/M0GRvsIMWbfif7nBAImIRgr9aJqOilO8ZM14kjP4PBym3eYrq9mcHDCbE6rBmYgPqPAOgMuJOJbKvBtFUiqPkuJ4TzUr0azouk5Y7w5hhQnK/LMW8+SJ4t7wZheaTPil/xVx7UltxivyzLsbv+nZM2PN/eh//uzl1lOTEH6Bexxea4H+Dgaa04ZoVmeEW3D5iJD8Plpi4O2+H6PCC04cIAYAHUJgquUaZkC8Uhr2bjQApjbOmxj7wHxusUjIc1ESY1EYhJWIrhA1OaGYHhpHWeNSS0wl7nDutpfELA0jTTZYIebpqtqwBKtMZi5iH5pdgQzf7d8RAHxfUO1PsRDhojr8JVmKfgXRb1plcgTCft4mdxZ8cnbPbu/x/wdQ== ansible@login-server"
  storage:
    config:
    - {ptable: gpt, 
      path: /dev/sda, 
      wipe: superblock, 
      preserve: false, 
      name: '', 
      grub_device: false,
      type: disk, id: disk-sdd}
      
    - {device: disk-sdd, size: 536870912, wipe: superblock, flag: boot, number: 1,
      preserve: false, grub_device: true, type: partition, id: partition-0}
    - {fstype: fat32, volume: partition-0, preserve: false, type: format, id: format-0}
    - {device: disk-sdd, size: 1073741824, wipe: superblock, flag: '', number: 2,
      preserve: false, grub_device: false, type: partition, id: partition-1}
    - {fstype: ext4, volume: partition-1, preserve: false, type: format, id: format-1}
    - {device: disk-sdd, size: -1, wipe: superblock, flag: '', number: 3,
      preserve: false, grub_device: false, type: partition, id: partition-2}
    - name: ubuntu-vg
      devices: [partition-2]
      preserve: false
      type: lvm_volgroup
      id: lvm_volgroup-0
    - {name: lv-0, volgroup: lvm_volgroup-0, size: 11%, wipe: superblock,
      preserve: false, type: lvm_partition, id: lvm_partition-1}
    - {fstype: xfs, volume: lvm_partition-1, preserve: false, type: format, id: format-3}
    - {name: swap, volgroup: lvm_volgroup-0, size: 1%, wipe: superblock,
      preserve: false, type: lvm_partition, id: lvm_partition-2}
    - {name: ubuntu-lv, volgroup: lvm_volgroup-0, size: -1, wipe: superblock,
      preserve: false, type: lvm_partition, id: lvm_partition-0}
    - {fstype: swap, volume: lvm_partition-2, preserve: false, type: format, id: format-4}
    - {path: '', device: format-4, type: mount, id: mount-4}
    - {fstype: xfs, volume: lvm_partition-0, preserve: false, type: format, id: format-5}
    - {path: /, device: format-5, type: mount, id: mount-5}
    - {path: /boot, device: format-1, type: mount, id: mount-1}
    - {path: /boot/efi, device: format-0, type: mount, id: mount-0}
    - {path: /home, device: format-3, type: mount, id: mount-3}
    swap: {swap: 0}
  timezone: Asia/Ho_Chi_Minh
  late-commands:
    - rm -f /target/etc/resolv.conf
    - printf 'nameserver 8.8.8.8' > /target/etc/resolv.conf
    - echo 'ansible ALL=(ALL) NOPASSWD:ALL' > /target/etc/sudoers.d/ansible
    - printf 'network@' >  /target/etc/netplan/00-installer-config.yaml
    - echo ' ' >>  /target/etc/netplan/00-installer-config.yaml
    - echo '  bonds@' >>  /target/etc/netplan/00-installer-config.yaml
    - echo '    bond0@' >>  /target/etc/netplan/00-installer-config.yaml
    - echo '      addresses@' >>  /target/etc/netplan/00-installer-config.yaml
    - echo '      - IP_ADDRESS/SUBNET_PREFIX' >>  /target/etc/netplan/00-installer-config.yaml
    - echo '      gateway4@ GATEWAY_ADDRESS' >>  /target/etc/netplan/00-installer-config.yaml
    - echo '      interfaces@' >>  /target/etc/netplan/00-installer-config.yaml
    - echo '      - CARD_10G_1' >>  /target/etc/netplan/00-installer-config.yaml
    - echo '      - CARD_10G_2' >>  /target/etc/netplan/00-installer-config.yaml
    - echo '      nameservers@' >>  /target/etc/netplan/00-installer-config.yaml
    - echo '        addresses@' >>  /target/etc/netplan/00-installer-config.yaml
    - echo '        - 8.8.8.8' >>  /target/etc/netplan/00-installer-config.yaml
    - echo '        search@ []' >>  /target/etc/netplan/00-installer-config.yaml
    - echo '      parameters@' >>  /target/etc/netplan/00-installer-config.yaml
    - echo '        lacp-rate@ fast' >>  /target/etc/netplan/00-installer-config.yaml
    - echo '        mode@ 802.3ad' >>  /target/etc/netplan/00-installer-config.yaml    
    - echo '        transmit-hash-policy@ layer2' >>  /target/etc/netplan/00-installer-config.yaml
    - echo '  ethernets@' >>  /target/etc/netplan/00-installer-config.yaml
    - echo '    CARD_10G_1@ {}' >>  /target/etc/netplan/00-installer-config.yaml
    - echo '    CARD_10G_2@ {}' >>  /target/etc/netplan/00-installer-config.yaml
    - echo '    CARD_1G_1@' >>  /target/etc/netplan/00-installer-config.yaml
    - echo '      dhcp4@ true' >>  /target/etc/netplan/00-installer-config.yaml
    - echo '    CARD_1G_2@' >>  /target/etc/netplan/00-installer-config.yaml
    - echo '      dhcp4@ true' >>  /target/etc/netplan/00-installer-config.yaml
    - echo '  version@ 2' >>  /target/etc/netplan/00-installer-config.yaml
    - sed -i 's|@|\x3A|g' /target/etc/netplan/00-installer-config.yaml
    - |
      cat <<EOF | sudo tee /target/home/README.md
      De cau hinh network nhanh hon:
          - Chay duoi quyen root: sudo su
          - Chay doan script cf.sh bang cach: bash cf.sh
          - Chay xong file backup se nam o /home.
          - Cach role back: mv ./00-installer-config.yaml /etc/netplan/00-installer-config.yaml
      .Ver 2.1 _ fixed bugs:
      - Scan Hardware Interface bug.
      - Remove default gateway arg. Auto calculate     
      -- Nguyenvp2 --
      EOF





    - |
      cat <<EOF | sudo tee /target/home/cf.sh
      #!/bin/bash

      # Generate a list of valid values using the ls command
      is_valid_ip() {
          local ip=\$1
          local regex="^([0-9]{1,3}\.){3}[0-9]{1,3}\$"

          if [[ \$ip =~ \$regex ]]; then
              return 0  # Valid IP address
          else
              return 1  # Invalid IP address
          fi
      }
      if [ "\$EUID" -ne 0 ]
        then echo "Please run as root"
        exit
      fi

      while true; do

        # ======================================== INTERFACE ========================================
        while true; do

        while true; do
          echo && echo  "IP ADDRESS"
          read -p "Give us IP address for this server: " ip_address
          if is_valid_ip "\$ip_address"; then
              echo "----------"
              echo  "IP address is valid."
              echo "----------"
              break
          else
              echo "----------"
              echo "Please enter valid IP address. Retry."
              echo "----------"
              continue
          fi
        done


        while true; do
            echo && echo "SUBNET PREFIX" 
            read -p "How about the subnet prefix: " subnet_prefix
            if [[ \$subnet_prefix =~ ^[0-9]+\$ ]] && [ \$subnet_prefix -ge 0 ] && [ \$subnet_prefix -le 32 ]; then
                echo "----------"
                echo "Subnet prefix is valid: \$subnet_prefix"
                echo "----------"
                break
            else
                echo "----------"
                echo "Please enter valid subnet prefix. Retry."
                echo "----------"
            fi
        done

        gateway=''
        subnet_bit=\$((0xFFFFFFFF << (32 - subnet_prefix)))
        subnet_mask=\$((subnet_bit >> 24 & 255)).\$((subnet_bit >> 16 & 255)).\$((subnet_bit >> 8 & 255)).\$((subnet_bit & 255))
        IFS=. read -r -a ip_parts <<< "\$ip_address"
        IFS=. read -r -a subnet_parts <<< "\$subnet_mask"
        for ((i=0; i<4; i++)); do
          if [ \$i -eq 3 ]; then    
            gateway_part=\$((ip_parts[i] &( subnet_parts[i] )  | 1 ))
          else
            gateway_part=\$((ip_parts[i] & subnet_parts[i]))
          fi
          gateway+="\$gateway_part"
          if [ \$i -lt 3 ]; then
            gateway+="."
          fi
        done
        echo && echo "SUMMARIZE"
        echo "----------"

        two_10Gif=\$(lshw -c network -short | grep 10Gb | awk '{print \$2}')
        two_1Gif=\$(lshw -c network -short | grep PCIe | awk '{print \$2}')


        # Display entered variables
        echo "You entered:"
        echo "- 1G  interfaces: \$two_1Gif"
        echo "- 10G interfaces: \$two_10Gif" && echo

        echo "- IP address: \$ip_address/\$subnet_prefix"
        echo "- Subnet mask: \$subnet_mask"
        echo "- Gateway: \$gateway"
        echo "----------"
        # ======================================== CONFIRM ========================================
        # Ask for confirmation
        echo && echo "CONFIRM" 
        echo "----------"
        read -p "Are these correct? (yes/no): " confirmation
        # Check if the user entered 'yes' to exit the loop
        if [ "\$confirmation" = "yes" ]; then
            echo "Confirmation received. Continue."
            echo "----------"

            echo && echo "CONFIGURATION" 
            echo "----------"
            echo "Backing up"
            new_folder="/home/ansible/netConfigBK_\$(date +%Y%m%d-%H%M%S)" && mkdir -p "\$new_folder" && cp /etc/netplan/00-installer-config.yaml "\$new_folder"
            
            echo "Config Interface "
            
            index=0
            for i in \$two_10Gif ; do 
            if [ \${index} == 0 ];  then sed -i "s/CARD_10G_1/\$i/g" /etc/netplan/00-installer-config.yaml ; fi ;
            if [ \${index} == 1 ];  then sed -i "s/CARD_10G_2/\$i/g" /etc/netplan/00-installer-config.yaml ; fi ;
            let index=\${index}+1; 
            done

            index=0
            for i in \$two_1Gif ; do 
            if [ \${index} == 0 ];  then sed -i "s/CARD_1G_1/\$i/g" /etc/netplan/00-installer-config.yaml ; fi ;
            if [ \${index} == 1 ];  then sed -i "s/CARD_1G_2/\$i/g" /etc/netplan/00-installer-config.yaml ; fi ;
            let index=${index}+1; 
            done


            echo "Config IP address"
            sed -i "s/IP_ADDRESS/\$ip_address/g" /etc/netplan/00-installer-config.yaml 

            echo "Config subnet-mask"
            sed -i "s/SUBNET_PREFIX/\$subnet_prefix:/g" /etc/netplan/00-installer-config.yaml 

            echo "Config gateway"
            sed -i "s/GATEWAY_ADDRESS/\$gateway/g" /etc/netplan/00-installer-config.yaml 

            echo "Restart NetworkManager"      
            netplan apply

            echo "----------"
            echo "All done."
            echo "----------"

            break
        else
            echo "----------"
            echo "Please try again."
            echo "----------"
        fi
      done

      EOF


