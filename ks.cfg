#version=DEVEL
# System authorization information
auth --enableshadow --passalgo=sha512
# Use CDROM installation media
cdrom
# Use graphical install
#graphical
text

# Run the Setup Agent on first boot
firstboot --enable
ignoredisk --only-use=sda
# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8

# Network information ks=cdrom:/ks.cfg
network  --bootproto=dhcp --device=em1 --onboot=off --ipv6=auto --no-activate
network  --bootproto=dhcp --device=em2 --onboot=off --ipv6=auto
network  --bootproto=dhcp --device=em3 --onboot=off --ipv6=auto
network  --bootproto=dhcp --device=em4 --onboot=off --ipv6=auto
network  --hostname=localhost.localdomain

selinux --disabled

# Root password
rootpw --iscrypted $6$93Xm5JVBxUWFBnGH$zaYBxJMQTQWXOP7pUtT1g7KEfnJrYeM9J.7fzGrXvr6l9vLn4KKdJizmoFB6rbnW4rwendV5FJQrZ6joYsRv10
# System services
services --disabled="chronyd"
# System timezone
timezone Asia/Ho_Chi_Minh --isUtc --nontp
# --- Using Python to create password  python3 -c 'import crypt,getpass;pw=getpass.getpass();print(crypt.crypt(pw) if (pw==getpass.getpass("Confirm: ")) else exit())'
user --groups=wheel --name=ansible --password=$6$oBrNP8/29eZHypeL$ga.lj8QB3u21/0EYfvCyyxvuBY4a5ZzLyLpVmu5wvzNGbY0vEJKbvfCAgAxC4TlkWcF7L5llsDxPQbCfIwke91 --iscrypted --gecos="ansible"
# System bootloader configuration
bootloader --append=" crashkernel=auto" --location=mbr --boot-drive=sda
# Partition clearing information
clearpart --none --initlabel
# Disk partitioning information

part /boot --fstype="xfs" --ondisk=sdi --size=2048
part /boot/efi --fstype="efi" --ondisk=sdi --size=1024 --fsoptions="umask=0077,shortname=winnt"
part pv.238 --fstype="lvmpv" --ondisk=sdi --grow
volgroup centos --pesize=4096 pv.238
logvol /home  --fstype="xfs" --percent=10 --name=home --vgname=centos
logvol swap  --fstype="swap" --size=8188 --name=swap --vgname=centos
logvol /  --fstype="xfs" --grow --name=root --vgname=centos --grow --size=1

%packages
@^minimal
@core
%end

%addon com_redhat_kdump --enable --reserve-mb='auto'

%end

%anaconda
pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty
pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok
pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty
%end

%post --nochroot --log=/mnt/sysimage/root/ks-post.log
# --- 
# --- resolv
echo "nameserver 8.8.8.8" > /mnt/sysimage/etc/resolv.conf

# --- Root bypass
/bin/echo -e "%ansible\tALL=(ALL)\tNOPASSWD: ALL" >  /mnt/sysimage/etc/sudoers.d/ansible

# --- Create ssh folder with mod 700
/bin/mkdir /mnt/sysimage/home/ansible/.ssh
/bin/chmod 700  /mnt/sysimage/home/ansible/.ssh
/bin/chown ansible:ansible  /mnt/sysimage/home/ansible/.ssh

# --- Add file key
/bin/chmod 640 /home/ansible/.ssh/authorized_keys >> /mnt/sysimage/home/ansible/.ssh/authorized_keys
/bin/echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDWBGnAXqymm/7z77LDEKaYVwwYCC7VZf15WSJg8sc1/bQGIr29OXuCLi3Qn+Ie8WLJn9wN0247uFhbFfIJtibSU2WCNDCEpyUabjSHuHm4Oz2/A+062FZolT77zelCVtEtzbEc4cooDLMTPhICgQI7Sz7ZB/f3LHUJ3IG2Pp4+8wOv2/V/jKfMOb/20HQxjFTs8nE7GtCcKhokDVpcPa1PSA7fNKSR5R1UvveJ9gFjAshFm0y1ejtXXXyjLL6ZWECtEx8HPnt1vqj0qRKRu04Oj2mTpsiJCPXKE9eQoiIopfidw/M0GRvsIMWbfif7nBAImIRgr9aJqOilO8ZM14kjP4PBym3eYrq9mcHDCbE6rBmYgPqPAOgMuJOJbKvBtFUiqPkuJ4TzUr0azouk5Y7w5hhQnK/LMW8+SJ4t7wZheaTPil/xVx7UltxivyzLsbv+nZM2PN/eh//uzl1lOTEH6Bexxea4H+Dgaa04ZoVmeEW3D5iJD8Plpi4O2+H6PCC04cIAYAHUJgquUaZkC8Uhr2bjQApjbOmxj7wHxusUjIc1ESY1EYhJWIrhA1OaGYHhpHWeNSS0wl7nDutpfELA0jTTZYIebpqtqwBKtMZi5iH5pdgQzf7d8RAHxfUO1PsRDhojr8JVmKfgXRb1plcgTCft4mdxZ8cnbPbu/x/wdQ== ansible@login-server" > /mnt/sysimage/home/ansible/.ssh/authorized_keys


# --- Change sshd config
/bin/sed -i 's/#PermitRootLogin yes/PermitRootLogin no/g' /mnt/sysimage/etc/ssh/sshd_config 
/bin/sed -i 's/PasswordAuthentication yes/PasswordAuthentication no/g' /mnt/sysimage/etc/ssh/sshd_config


# --- Addding bond0 
/bin/echo -e "DEVICE=bond0 \nIPADDR=THIS_IS_IP\nPREFIX=THIS_IS_NETMASK\nGATEWAY=THIS_IS_GATEWAY\nUSERCTL=no\nBOOTPROTO=none\nBONDING_MASTER=yes\nONBOOT=yes\nBONDING_OPTS=\"mode=4 miimon=100 lacp_rate=1\""  > /mnt/sysimage/etc/sysconfig/network-scripts/ifcfg-bond0
/bin/cat <<EOF | tee /mnt/sysimage/home/ansible/README.md
      De cau hinh network nhanh hon:
          - Chay duoi quyen root: sudo su
          - Chay doan script cf.sh bang cach: bash config_network.sh
          - Chay xong file backup se nam o home.
          - Cach rollback: mv ./<backup_folder>/* /etc/sysconfig/network-scripts/
      -- Nguyenvp2 --
EOF

/bin/cat <<EOF | tee /mnt/sysimage/home/ansible/config_network.sh


# Generate a list of valid values using the ls command
is_valid_ip() {
    local ip=\$1
    local regex="^([0-9]{1,3}\.){3}[0-9]{1,3}\$"

    if [[ \$ip =~ \$regex ]]; then
        return 0  # Valid IP address
    else
        return 1  # Invalid IP address
    fi
}
if [ "\$EUID" -ne 0 ]
  then echo "Please run as root"
  exit
fi

while true; do

  # ======================================== INTERFACE ========================================
  while true; do
    echo  && echo "NETWORK INTERFACE" 
    echo "----------"

    # Display all valid values with indexes
    valid_values=(\$(ls /sys/class/net/))
    echo "List of all interfaces:"
    for index in "\${!valid_values[@]}"; do
        echo "\$index: \${valid_values[index]}"
    done
    echo "----------"
    # Request user input for index of variable 3
    read -p "Card 10G - 1: " index_C10G1
    C10G1="\${valid_values[index_C10G1]}"

    # Request user input for index of variable 4
    read -p "Card 10G - 2: " index_C10G2
    C10G2="\${valid_values[index_C10G2]}"

    # Check if entered variables are in the valid list
    if [[  " \${valid_values[@]} " =~ " \$C10G1 " && " \${valid_values[@]} " =~ " \$C10G2 " ]]; then
        echo "----------"
        echo "All index are in the valid list."
        echo "----------"
        break
    else
        echo "----------"
        echo "Please enter valid index for all card. Retry."
        echo "----------"
        continue
    fi
  done



  while true; do
    echo && echo  "IP ADDRESS"
    read -p "Give us IP address for this server: " ip_address
    if is_valid_ip "\$ip_address"; then
        echo "----------"
        echo  "IP address is valid."
        echo "----------"
        break
    else
        echo "----------"
        echo "Please enter valid IP address. Retry."
        echo "----------"
        continue
    fi
  done


  while true; do
      echo && echo "SUBNET PREFIX" 
      read -p "How about the subnet prefix: " subnet_prefix
      if [[ \$subnet_prefix =~ ^[0-9]+\$ ]] && [ \$subnet_prefix -ge 0 ] && [ \$subnet_prefix -le 32 ]; then
          echo "----------"
          echo "Subnet prefix is valid: \$subnet_prefix"
          echo "----------"
          break
      else
          echo "----------"
          echo "Please enter valid subnet prefix. Retry."
          echo "----------"
      fi
  done

  gateway=''
  subnet_bit=\$((0xFFFFFFFF << (32 - subnet_prefix)))
  subnet_mask=\$((subnet_bit >> 24 & 255)).\$((subnet_bit >> 16 & 255)).\$((subnet_bit >> 8 & 255)).\$((subnet_bit & 255))
  IFS=. read -r -a ip_parts <<< "\$ip_address"
  IFS=. read -r -a subnet_parts <<< "\$subnet_mask"
  for ((i=0; i<4; i++)); do
    if [ \$i -eq 3 ]; then    
      gateway_part=\$((ip_parts[i] &( subnet_parts[i] )  | 1 ))
    else
      gateway_part=\$((ip_parts[i] & subnet_parts[i]))
    fi
    gateway+="\$gateway_part"
    if [ \$i -lt 3 ]; then
      gateway+="."
    fi
  done
  echo && echo "SUMMARIZE"
  echo "----------"
  # Display entered variables
  echo "You entered:"
  echo "- 10G interface 1: \$C10G1"
  echo "- 10G interface 2: \$C10G2"&& echo
  echo "- IP address: \$ip_address/\$subnet_prefix"
  echo "- Subnet mask: \$subnet_mask"
  echo "- Gateway: \$gateway"
  echo "----------"
  # ======================================== CONFIRM ========================================
  # Ask for confirmation
  echo && echo "CONFIRM" 
  echo "----------"
  read -p "Are these correct? (yes/no): " confirmation
  # Check if the user entered 'yes' to exit the loop
  if [ "\$confirmation" = "yes" ]; then
      echo "Confirmation received. Continue."
      echo "----------"

      echo && echo "CONFIGURATION" 
      echo "----------"
      echo "Backing up"
      new_folder="/home/ansible/netConfigBK_\$(date +%Y%m%d-%H%M%S)" && mkdir -p "\$new_folder" && cp /etc/sysconfig/network-scripts/ifcfg-* "\$new_folder"
      
      echo "Config Card 10Gb - 1"
      sed -i 's/BOOTPROTO=dhcp/BOOTPROTO=none/g' /etc/sysconfig/network-scripts/ifcfg-\$C10G1
      sed -i 's/ONBOOT=no/ONBOOT=yes/g' /etc/sysconfig/network-scripts/ifcfg-\$C10G1
      echo -e "MASTER=bond0\nSLAVE=yes\nUSERCTL=no" >> /etc/sysconfig/network-scripts/ifcfg-\$C10G1
      
      echo "Config Card 10Gb - 2"
      sed -i 's/BOOTPROTO=dhcp/BOOTPROTO=none/g' /etc/sysconfig/network-scripts/ifcfg-\$C10G2
      sed -i 's/ONBOOT=no/ONBOOT=yes/g' /etc/sysconfig/network-scripts/ifcfg-\$C10G2
      echo -e "MASTER=bond0\nSLAVE=yes\nUSERCTL=no" >> /etc/sysconfig/network-scripts/ifcfg-\$C10G2

      echo "Reset bond0 config"
      echo -e "DEVICE=bond0 \nIPADDR=THIS_IS_IP\nPREFIX=THIS_IS_NETMASK\nGATEWAY=THIS_IS_GATEWAY\nUSERCTL=no\nBOOTPROTO=none\nBONDING_MASTER=yes\nONBOOT=yes\nBONDING_OPTS=\"mode=4 miimon=100 lacp_rate=1\""  > /etc/sysconfig/network-scripts/ifcfg-bond0
     
      echo "Config IP address"
      sed -i "s/THIS_IS_IP/\$ip_address/g" /etc/sysconfig/network-scripts/ifcfg-bond0

      echo "Config subnet-mask"
      sed -i "s/THIS_IS_NETMASK/\$subnet_prefix/g"  /etc/sysconfig/network-scripts/ifcfg-bond0

      echo "Config gateway"
      sed -i "s/THIS_IS_GATEWAY/\$gateway/g" /etc/sysconfig/network-scripts/ifcfg-bond0

      echo "Restart NetworkManager"
      systemctl restart network

      echo "----------"
      echo "All done."
      echo "----------"

      break
  else
      echo "----------"
      echo "Please try again."
      echo "----------"
  fi
done







EOF


%end
