#version=DEVEL
# System authorization information
auth --enableshadow --passalgo=sha512
# Use CDROM installation media
cdrom
# Use graphical install
#graphical
text

# Run the Setup Agent on first boot
firstboot --enable
ignoredisk --only-use=sda
# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8

# Network information ks=cdrom:/ks.cfg
network  --bootproto=dhcp --device=em1 --onboot=off --ipv6=auto --no-activate
network  --bootproto=dhcp --device=em2 --onboot=off --ipv6=auto
network  --bootproto=dhcp --device=em3 --onboot=off --ipv6=auto
network  --bootproto=dhcp --device=em4 --onboot=off --ipv6=auto
network  --hostname=localhost.localdomain

selinux --disabled

# Root password
rootpw --iscrypted $6$93Xm5JVBxUWFBnGH$zaYBxJMQTQWXOP7pUtT1g7KEfnJrYeM9J.7fzGrXvr6l9vLn4KKdJizmoFB6rbnW4rwendV5FJQrZ6joYsRv10
# System services
services --disabled="chronyd"
# System timezone
timezone Asia/Ho_Chi_Minh --isUtc --nontp
# --- Using Python to create password  python3 -c 'import crypt,getpass;pw=getpass.getpass();print(crypt.crypt(pw) if (pw==getpass.getpass("Confirm: ")) else exit())'
user --groups=wheel --name=ansible --password=$6$oBrNP8/29eZHypeL$ga.lj8QB3u21/0EYfvCyyxvuBY4a5ZzLyLpVmu5wvzNGbY0vEJKbvfCAgAxC4TlkWcF7L5llsDxPQbCfIwke91 --iscrypted --gecos="ansible"
# System bootloader configuration
bootloader --append=" crashkernel=auto" --location=mbr --boot-drive=sda
# Partition clearing information
clearpart --none --initlabel
# Disk partitioning information
part /boot --fstype="xfs" --ondisk=sda --size=1024
part pv.238 --fstype="lvmpv" --ondisk=sda --size=913974
part /boot/efi --fstype="efi" --ondisk=sda --size=200 --fsoptions="umask=0077,shortname=winnt"
volgroup centos --pesize=4096 pv.238
logvol /home  --fstype="xfs" --size=51200 --name=home --vgname=centos
logvol swap  --fstype="swap" --size=8188 --name=swap --vgname=centos
logvol /  --fstype="xfs" --size=854580 --name=root --vgname=centos

%packages
@^minimal
@core
%end

%addon com_redhat_kdump --enable --reserve-mb='auto'

%end

%anaconda
pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty
pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok
pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty
%end

%post --nochroot --log=/mnt/sysimage/root/ks-post.log
# --- 
# --- resolv
echo "nameserver 8.8.8.8" > /mnt/sysimage/etc/resolv.conf

# --- Root bypass
/bin/echo -e "%ansible\tALL=(ALL)\tNOPASSWD: ALL" >  /mnt/sysimage/etc/sudoers.d/ansible

# --- Create ssh folder with mod 700
/bin/mkdir /mnt/sysimage/home/ansible/.ssh
/bin/chmod 700  /mnt/sysimage/home/ansible/.ssh
/bin/chown ansible:ansible  /mnt/sysimage/home/ansible/.ssh

# --- Add file key
/bin/chmod 640 /home/ansible/.ssh/authorized_keys >> /mnt/sysimage/home/ansible/.ssh/authorized_keys
/bin/echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDWBGnAXqymm/7z77LDEKaYVwwYCC7VZf15WSJg8sc1/bQGIr29OXuCLi3Qn+Ie8WLJn9wN0247uFhbFfIJtibSU2WCNDCEpyUabjSHuHm4Oz2/A+062FZolT77zelCVtEtzbEc4cooDLMTPhICgQI7Sz7ZB/f3LHUJ3IG2Pp4+8wOv2/V/jKfMOb/20HQxjFTs8nE7GtCcKhokDVpcPa1PSA7fNKSR5R1UvveJ9gFjAshFm0y1ejtXXXyjLL6ZWECtEx8HPnt1vqj0qRKRu04Oj2mTpsiJCPXKE9eQoiIopfidw/M0GRvsIMWbfif7nBAImIRgr9aJqOilO8ZM14kjP4PBym3eYrq9mcHDCbE6rBmYgPqPAOgMuJOJbKvBtFUiqPkuJ4TzUr0azouk5Y7w5hhQnK/LMW8+SJ4t7wZheaTPil/xVx7UltxivyzLsbv+nZM2PN/eh//uzl1lOTEH6Bexxea4H+Dgaa04ZoVmeEW3D5iJD8Plpi4O2+H6PCC04cIAYAHUJgquUaZkC8Uhr2bjQApjbOmxj7wHxusUjIc1ESY1EYhJWIrhA1OaGYHhpHWeNSS0wl7nDutpfELA0jTTZYIebpqtqwBKtMZi5iH5pdgQzf7d8RAHxfUO1PsRDhojr8JVmKfgXRb1plcgTCft4mdxZ8cnbPbu/x/wdQ== ansible@login-server" > /mnt/sysimage/home/ansible/.ssh/authorized_keys


# --- Change sshd config
/bin/sed -i 's/#PermitRootLogin yes/PermitRootLogin no/g' /mnt/sysimage/etc/ssh/sshd_config 
/bin/sed -i 's/PasswordAuthentication yes/PasswordAuthentication no/g' /mnt/sysimage/etc/ssh/sshd_config


# --- Addding bond0 
/bin/echo -e "DEVICE=bond0 \nIPADDR=THIS_IS_IP\nPREFIX=THIS_IS_NETMASK\nGATEWAY=THIS_IS_GATEWAY\nUSERCTL=no\nBOOTPROTO=none\nBONDING_MASTER=yes\nONBOOT=yes\nBONDING_OPTS=\"mode=4 miimon=100 lacp_rate=1\""  > /mnt/sysimage/etc/sysconfig/network-scripts/ifcfg-bond0
/bin/cat <<EOF | tee /mnt/sysimage/home/ansible/README.md
      De cau hinh network nhanh hon:
          - Chay duoi quyen root: sudo su
          - Chay doan script cf.sh bang cach: bash config_network.sh -i ip_address -s subnet (Script se tu tinh toan Gateway cho ban)
          - Chay xong file backup se nam o home.
          - Cach rollback: mv ./<backup_folder>/* /etc/sysconfig/network-scripts/
      -- Nguyenvp2 --
EOF

/bin/cat <<EOF | tee /mnt/sysimage/home/ansible/config_network.sh
#!/bin/bash
set -Eeuo pipefail

function log() {
        echo >&2 -e "[\$(date +"%Y-%m-%d %H:%M:%S")] \${1-}"
}
function die() {
        local msg=\$1
        local code=\${2-1} 
        log "\$msg"
        exit "\$code"
}
valid_values=($(ls /sys/class/net/))
for value in "${valid_values[@]}"; do
    echo "$value"
done
while true; do
    # Request user input for variable 1
    read -p "Enter variable 1: " var1

    # Request user input for variable 2
    read -p "Enter variable 2: " var2

    # Request user input for variable 3
    read -p "Enter variable 3: " var3

    # Request user input for variable 4
    read -p "Enter variable 4: " var4

    # Display entered variables
    echo "You entered:"
    echo "Variable 1: $var1"
    echo "Variable 2: $var2"
    echo "Variable 3: $var3"
    echo "Variable 4: $var4"

    # Check if entered variables are in the valid list
    if [[ " ${valid_values[@]} " =~ " $var1 " && " ${valid_values[@]} " =~ " $var2 " && " ${valid_values[@]} " =~ " $var3 " && " ${valid_values[@]} " =~ " $var4 " ]]; then
        echo "All variables are in the valid list."
    else
        echo "Please enter valid values for all variables. Retry."
        continue
    fi

    # Ask for confirmation
    read -p "Are these correct? (yes/no): " confirmation

    # Check if the user entered 'yes' to exit the loop
    if [ "$confirmation" = "yes" ]; then
        echo "Confirmation received. Exiting."
        break
    else
        echo "Please try again."
    fi
done






gateway=''
subnet_bit=\$((0xFFFFFFFF << (32 - subnet)))
subnet=\$((subnet_bit >> 24 & 255)).\$((subnet_bit >> 16 & 255)).\$((subnet_bit >> 8 & 255)).\$((subnet_bit & 255))
IFS=. read -r -a ip_parts <<< "\$ip_address"
IFS=. read -r -a subnet_parts <<< "\$subnet"
for ((i=0; i<4; i++)); do
  if [ \$i -eq 3 ]; then    
    gateway_part=\$((ip_parts[i] &( subnet_parts[i] )  | 1 ))
  else
    gateway_part=\$((ip_parts[i] & subnet_parts[i]))
  fi
  gateway+="\$gateway_part"
  if [ \$i -lt 3 ]; then
    gateway+="."
  fi
done


log "Dang tao file backup cac cau hinh"
new_folder="/home/ansible/netConfigBK_\$(date +%Y%m%d-%H%M%S)" && mkdir -p "\$new_folder" && cp /etc/sysconfig/network-scripts/ifcfg-* "\$new_folder"
log "Dang quet cac card mang co san"
echo \$(ls /sys/class/net/)


log "  - Da tao file backup"

log "Dang cau hinh card mang 10G"
  for interface in \$(ls /sys/class/net/); do
    speed=\$(ethtool \$interface | grep "Speed:" | awk '{print \$2}')
      if [ "\$speed" = "10000Mb/s" ]; then
          echo "This is 10G name: \$interface"
          sed -i 's/BOOTPROTO=dhcp/BOOTPROTO=none/g' /etc/sysconfig/network-scripts/ifcfg-\$interface
          sed -i 's/ONBOOT=no/ONBOOT=yes/g' /etc/sysconfig/network-scripts/ifcfg-\$interface
          echo -e "MASTER=bond0\nSLAVE=yes\nUSERCTL=no" >> /etc/sysconfig/network-scripts/ifcfg-\$interface
      fi
  done

log "  - Da cau hinh card mang 10G"


log "Input IP: \$ip_address"
log "Input SN: \$subnet"
log "Input GW: \$gateway"




log "Cau hinh dia chi IP"
sed -i "s/THIS_IS_IP/\$ip_address/g" /etc/sysconfig/network-scripts/ifcfg-bond0

log "Cau hinh subnet-mask"
sed -i "s/THIS_IS_NETMASK/\$subnet:/g"       /etc/sysconfig/network-scripts/ifcfg-bond0

log "Cau hinh gateway4"
sed -i "s/THIS_IS_GATEWAY/\$gateway/g" /etc/sysconfig/network-scripts/ifcfg-bond0

log "This is new settings:"
cat /etc/sysconfig/network-scripts/ifcfg-bond0

log "Khoi dong lai NetworkManager"
systemctl restart NetworkManager

log "  -- All done. Goodbye ! --"

EOF


%end
